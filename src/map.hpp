#pragma once

#include <array>
#include <cstdint>

namespace bkrl {
////////////////////////////////////////////////////////////////////////////////////////////////////
constexpr size_t size_block = 16;
constexpr size_t size_chunk = size_block * size_block;

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
template <typename T>
struct block_t {
    std::array<T, size_block * size_block> data;
};

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
template <typename T>
using chunk_t = block_t<block_t<T>>;

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
template <typename T, typename Function>
void for_each_cell(block_t<T>& block, Function&& f, int x = 0, int y = 0) {
    for (size_t i = 0; i < size_block * size_block; ++i) {
        auto const xx = x + (i % size_block);
        auto const yy = y + (i / size_block);
        f(xx, yy, block.data[i]);
    }
}

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
template <typename T, typename Function>
void for_each_cell(chunk_t<T>& chunk, Function&& f, int x = 0, int y = 0) {
    for (size_t i = 0; i < size_block * size_block; ++i) {
        auto const xx = x + (size_block * (i % size_block));
        auto const yy = y + (size_block * (i / size_block));
        for_each_cell(chunk.data[i], std::forward<Function>(f), xx, yy);
    }
}

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
struct map_terrain_t {
    uint16_t base_type = 0; // floor
    uint16_t variation = 0; // dirty floor
};

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
struct map_object_t {
    uint16_t base_type = 0; // door
    uint16_t variation = 0; // rusty door
};

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
struct map_cell_t {
    map_terrain_t ter;
    map_object_t  obj;
};

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
struct map_light_t {
    float light = 0.0f;
};

//--------------------------------------------------------------------------------------------------
//!
//--------------------------------------------------------------------------------------------------
class map {
public:
private:
    chunk_t<map_cell_t>  base_;
    chunk_t<map_light_t> light_;
};


////////////////////////////////////////////////////////////////////////////////////////////////////
} //namespace bkrl
